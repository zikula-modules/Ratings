<?php

/**
 * Ratings.
 *
 * @copyright Timothy Paustian (Paustian)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Timothy Paustian <tdpaustian@gmail.com>.
 * @see https://www.microbiologytext.com/
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

namespace Paustian\RatingsModule\Form\Type\Base;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\Extension\Core\Type\ResetType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\Common\Translator\TranslatorTrait;
use Paustian\RatingsModule\AppSettings;

/**
 * Configuration form type base class.
 */
abstract class AbstractConfigType extends AbstractType
{
    use TranslatorTrait;


    public function __construct(
        TranslatorInterface $translator
    ) {
        $this->setTranslator($translator);
    }

    public function setTranslator(TranslatorInterface $translator)
    {
        $this->translator = $translator;
    }

    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $this->addRatingSettingsFields($builder, $options);
        $this->addListViewsFields($builder, $options);
        $this->addModerationFields($builder, $options);

        $this->addSubmitButtons($builder, $options);
    }

    /**
     * Adds fields for rating settings fields.
     */
    public function addRatingSettingsFields(FormBuilderInterface $builder, array $options = [])
    {
        
        $builder->add('ratingScale', IntegerType::class, [
            'label' => $this->__('Rating scale:'),
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('The number of divisions in the scale. For example there are five divisions in a 1 to 5 scale, four divisions in a four-star scale')
            ],
            'help' => $this->__('The number of divisions in the scale. For example there are five divisions in a 1 to 5 scale, four divisions in a four-star scale'),
            'empty_data' => 5,
            'attr' => [
                'maxlength' => 11,
                'class' => '',
                'title' => $this->__('Enter the rating scale. Only digits are allowed.')
            ],
            'required' => true,
        ]);
        
        $builder->add('iconFa', TextType::class, [
            'label' => $this->__('Icon fa:'),
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('A font-awesome css string that is used to display ratings. Either this or iconUrls must be specified.')
            ],
            'help' => $this->__('A font-awesome css string that is used to display ratings. Either this or iconUrls must be specified.'),
            'empty_data' => 'fa-star',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => $this->__('Enter the icon fa.')
            ],
            'required' => false,
        ]);
        
        $builder->add('halfIconFa', TextType::class, [
            'label' => $this->__('Half icon fa:'),
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('A font-awesome css string that is used to display ratings. Either this or iconUrls must be specified.')
            ],
            'help' => $this->__('A font-awesome css string that is used to display ratings. Either this or iconUrls must be specified.'),
            'empty_data' => 'fa-star-half',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => $this->__('Enter the half icon fa.')
            ],
            'required' => false,
        ]);
        
        $builder->add('emptyIconFa', TextType::class, [
            'label' => $this->__('Empty icon fa:'),
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('A font-awesome css string that is used to display ratings. Either this or iconUrls must be specified.')
            ],
            'help' => $this->__('A font-awesome css string that is used to display ratings. Either this or iconUrls must be specified.'),
            'empty_data' => 'fa-star-o',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => $this->__('Enter the empty icon fa.')
            ],
            'required' => false,
        ]);
        
        $builder->add('iconUrl', TextType::class, [
            'label' => $this->__('Icon url:'),
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('A url to a rating icon to be used for a rating. Either this or IconFas must be designated.')
            ],
            'help' => $this->__('A url to a rating icon to be used for a rating. Either this or IconFas must be designated.'),
            'empty_data' => '',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => $this->__('Enter the icon url.')
            ],
            'required' => false,
        ]);
        
        $builder->add('halfIconUrl', TextType::class, [
            'label' => $this->__('Half icon url:'),
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('A url to a rating icon to be used for a rating. Either this or IconFas must be designated.')
            ],
            'help' => $this->__('A url to a rating icon to be used for a rating. Either this or IconFas must be designated.'),
            'empty_data' => '',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => $this->__('Enter the half icon url.')
            ],
            'required' => false,
        ]);
        
        $builder->add('emptyIconUrl', TextType::class, [
            'label' => $this->__('Empty icon url:'),
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('A url to a rating icon to be used for a rating. Either this or IconFas must be designated.')
            ],
            'help' => $this->__('A url to a rating icon to be used for a rating. Either this or IconFas must be designated.'),
            'empty_data' => '',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => $this->__('Enter the empty icon url.')
            ],
            'required' => false,
        ]);
    }

    /**
     * Adds fields for list views fields.
     */
    public function addListViewsFields(FormBuilderInterface $builder, array $options = [])
    {
        
        $builder->add('ratingEntriesPerPage', IntegerType::class, [
            'label' => $this->__('Rating entries per page:'),
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('The amount of ratings shown per page')
            ],
            'help' => $this->__('The amount of ratings shown per page'),
            'empty_data' => 10,
            'attr' => [
                'maxlength' => 11,
                'class' => '',
                'title' => $this->__('Enter the rating entries per page. Only digits are allowed.')
            ],
            'required' => true,
        ]);
        
        $builder->add('linkOwnRatingsOnAccountPage', CheckboxType::class, [
            'label' => $this->__('Link own ratings on account page:'),
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Whether to add a link to ratings of the current user on his account page')
            ],
            'help' => $this->__('Whether to add a link to ratings of the current user on his account page'),
            'attr' => [
                'class' => '',
                'title' => $this->__('The link own ratings on account page option')
            ],
            'required' => false,
        ]);
        
        $builder->add('showOnlyOwnEntries', CheckboxType::class, [
            'label' => $this->__('Show only own entries:'),
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Whether only own entries should be shown on view pages by default or not')
            ],
            'help' => $this->__('Whether only own entries should be shown on view pages by default or not'),
            'attr' => [
                'class' => '',
                'title' => $this->__('The show only own entries option')
            ],
            'required' => false,
        ]);
    }

    /**
     * Adds fields for moderation fields.
     */
    public function addModerationFields(FormBuilderInterface $builder, array $options = [])
    {
        
        $builder->add('allowModerationSpecificCreatorForRating', CheckboxType::class, [
            'label' => $this->__('Allow moderation specific creator for rating:'),
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Whether to allow moderators choosing a user which will be set as creator.')
            ],
            'help' => $this->__('Whether to allow moderators choosing a user which will be set as creator.'),
            'attr' => [
                'class' => '',
                'title' => $this->__('The allow moderation specific creator for rating option')
            ],
            'required' => false,
        ]);
        
        $builder->add('allowModerationSpecificCreationDateForRating', CheckboxType::class, [
            'label' => $this->__('Allow moderation specific creation date for rating:'),
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Whether to allow moderators choosing a custom creation date.')
            ],
            'help' => $this->__('Whether to allow moderators choosing a custom creation date.'),
            'attr' => [
                'class' => '',
                'title' => $this->__('The allow moderation specific creation date for rating option')
            ],
            'required' => false,
        ]);
    }

    /**
     * Adds submit buttons.
     */
    public function addSubmitButtons(FormBuilderInterface $builder, array $options = [])
    {
        $builder->add('save', SubmitType::class, [
            'label' => $this->__('Update configuration'),
            'icon' => 'fa-check',
            'attr' => [
                'class' => 'btn btn-success'
            ]
        ]);
        $builder->add('reset', ResetType::class, [
            'label' => $this->__('Reset'),
            'icon' => 'fa-refresh',
            'attr' => [
                'class' => 'btn btn-default',
                'formnovalidate' => 'formnovalidate'
            ]
        ]);
        $builder->add('cancel', SubmitType::class, [
            'label' => $this->__('Cancel'),
            'icon' => 'fa-times',
            'attr' => [
                'class' => 'btn btn-default',
                'formnovalidate' => 'formnovalidate'
            ]
        ]);
    }

    public function getBlockPrefix()
    {
        return 'paustianratingsmodule_config';
    }

    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver->setDefaults([
            // define class for underlying data
            'data_class' => AppSettings::class
        ]);
    }
}
