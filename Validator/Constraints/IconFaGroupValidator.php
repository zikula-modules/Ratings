<?php

/**
 * Ratings.
 *
 * @copyright Timothy Paustian (Paustian)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Timothy Paustian <tdpaustian@gmail.com>.
 * @see https://www.microbiologytext.com/
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

namespace Paustian\RatingsModule\Validator\Constraints;

use Symfony\Component\Validator\Constraint;
use Symfony\Component\Validator\ConstraintValidator;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\Common\Translator\TranslatorTrait;


define( 'NO_NEED_FOR_FA_STRING', 1);
define( 'MUST_BEGIN_WITH_FA', 2);

/**
 * List entry validator.
 */
class IconFaGroupValidator extends ConstraintValidator
{

    use TranslatorTrait;


    public function __construct(TranslatorInterface $translator)
    {
        $this->setTranslator($translator);
    }

    public function setTranslator(TranslatorInterface $translator)
    {
        $this->translator = $translator;
    }

    public function validate($value, Constraint $constraint)
    {
        $data = $this->context->getRoot()->getData();
        //If this is empty, then check to make sure the url icons are full
        if(!preg_match('/\S/', $value)){
            if( !preg_match('/\S/', $data->getIconUrl()) ||
                !preg_match('/\S/', $data->getHalfIconUrl()) ||
                !preg_match('/\S/', $data->getEmptyIconUrl()) ){
                $this->context->buildViolation($this->__("If this string is empty then the urlIcon strings have to be specified."))->addViolation();
            }
            //If the string is empty, we don't need to check further.
            return;
        }
        //lets see if we have the right format
        $faMessage = $this->_isFontAwesome($value);
        if($faMessage === NO_NEED_FOR_FA_STRING){
            $this->context->buildViolation($this->__("You do not need to include the initial fa in the class string."))->addViolation();
        }
        if($faMessage === MUST_BEGIN_WITH_FA){
            $this->context->buildViolation($this->__("Font awesome icons must begin with fa-"))->addViolation();
        }
    }


    //check to see if the font awesome string is available.
    private function _isFontAwesome($value){
        if(preg_match("/^fa .*/", $value)){
            return NO_NEED_FOR_FA_STRING;
        }
        if(!preg_match("/^fa-.*/", $value)){
            return MUST_BEGIN_WITH_FA;
        }
    }
}
