<?php

/**
 * Ratings.
 *
 * @copyright Timothy Paustian (Paustian)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Timothy Paustian <tdpaustian@gmail.com>.
 * @see https://www.microbiologytext.com/
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

namespace Paustian\RatingsModule\Base;

use Symfony\Component\Validator\Constraints as Assert;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;

/**
 * Application settings class for handling module variables.
 */
abstract class AbstractAppSettings
{
    /**
     * @var VariableApiInterface
     */
    protected $variableApi;
    
    /**
     * The number of divisions in the scale. For example there are five divisions in a 1 to 5 scale, four divisions in a four-star scale
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var int $ratingScale
     */
    protected $ratingScale = 5;
    
    /**
     * A font-awesome css string that is used to display ratings. Either this or iconUrls must be specified.
     *
     * @Assert\NotNull
     * @Assert\Length(min="0", max="255")
     * @var string $iconFa
     */
    protected $iconFa = '';
    
    /**
     * A font-awesome css string that is used to display ratings. Either this or iconUrls must be specified.
     *
     * @Assert\NotNull
     * @Assert\Length(min="0", max="255")
     * @var string $halfIconFa
     */
    protected $halfIconFa = '';
    
    /**
     * A font-awesome css string that is used to display ratings. Either this or iconUrls must be specified.
     *
     * @Assert\NotNull
     * @Assert\Length(min="0", max="255")
     * @var string $emptyIconFa
     */
    protected $emptyIconFa = '';
    
    /**
     * A url to a rating icon to be used for a rating. Either this or IconFas must be designated.
     *
     * @Assert\NotNull
     * @Assert\Length(min="0", max="255")
     * @var string $iconUrl
     */
    protected $iconUrl = '';
    
    /**
     * A url to a rating icon to be used for a rating. Either this or IconFas must be designated.
     *
     * @Assert\NotNull
     * @Assert\Length(min="0", max="255")
     * @var string $halfIconUrl
     */
    protected $halfIconUrl = '';
    
    /**
     * A url to a rating icon to be used for a rating. Either this or IconFas must be designated.
     *
     * @Assert\NotNull
     * @Assert\Length(min="0", max="255")
     * @var string $emptyIconUrl
     */
    protected $emptyIconUrl = '';
    
    /**
     * The amount of ratings shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var int $ratingEntriesPerPage
     */
    protected $ratingEntriesPerPage = 10;
    
    /**
     * Whether to add a link to ratings of the current user on his account page
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     * @var bool $linkOwnRatingsOnAccountPage
     */
    protected $linkOwnRatingsOnAccountPage = true;
    
    /**
     * Whether only own entries should be shown on view pages by default or not
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     * @var bool $showOnlyOwnEntries
     */
    protected $showOnlyOwnEntries = false;
    
    /**
     * Whether to allow moderators choosing a user which will be set as creator.
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     * @var bool $allowModerationSpecificCreatorForRating
     */
    protected $allowModerationSpecificCreatorForRating = false;
    
    /**
     * Whether to allow moderators choosing a custom creation date.
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     * @var bool $allowModerationSpecificCreationDateForRating
     */
    protected $allowModerationSpecificCreationDateForRating = false;
    
    
    public function __construct(
        VariableApiInterface $variableApi
    ) {
        $this->variableApi = $variableApi;
    
        $this->load();
    }
    
    /**
     * Returns the rating scale.
     *
     * @return int
     */
    public function getRatingScale()
    {
        return $this->ratingScale;
    }
    
    /**
     * Sets the rating scale.
     *
     * @param int $ratingScale
     *
     * @return void
     */
    public function setRatingScale($ratingScale)
    {
        if ((int)$this->ratingScale !== (int)$ratingScale) {
            $this->ratingScale = (int)$ratingScale;
        }
    }
    
    /**
     * Returns the icon fa.
     *
     * @return string
     */
    public function getIconFa()
    {
        return $this->iconFa;
    }
    
    /**
     * Sets the icon fa.
     *
     * @param string $iconFa
     *
     * @return void
     */
    public function setIconFa($iconFa)
    {
        if ($this->iconFa !== $iconFa) {
            $this->iconFa = isset($iconFa) ? $iconFa : '';
        }
    }
    
    /**
     * Returns the half icon fa.
     *
     * @return string
     */
    public function getHalfIconFa()
    {
        return $this->halfIconFa;
    }
    
    /**
     * Sets the half icon fa.
     *
     * @param string $halfIconFa
     *
     * @return void
     */
    public function setHalfIconFa($halfIconFa)
    {
        if ($this->halfIconFa !== $halfIconFa) {
            $this->halfIconFa = isset($halfIconFa) ? $halfIconFa : '';
        }
    }
    
    /**
     * Returns the empty icon fa.
     *
     * @return string
     */
    public function getEmptyIconFa()
    {
        return $this->emptyIconFa;
    }
    
    /**
     * Sets the empty icon fa.
     *
     * @param string $emptyIconFa
     *
     * @return void
     */
    public function setEmptyIconFa($emptyIconFa)
    {
        if ($this->emptyIconFa !== $emptyIconFa) {
            $this->emptyIconFa = isset($emptyIconFa) ? $emptyIconFa : '';
        }
    }
    
    /**
     * Returns the icon url.
     *
     * @return string
     */
    public function getIconUrl()
    {
        return $this->iconUrl;
    }
    
    /**
     * Sets the icon url.
     *
     * @param string $iconUrl
     *
     * @return void
     */
    public function setIconUrl($iconUrl)
    {
        if ($this->iconUrl !== $iconUrl) {
            $this->iconUrl = isset($iconUrl) ? $iconUrl : '';
        }
    }
    
    /**
     * Returns the half icon url.
     *
     * @return string
     */
    public function getHalfIconUrl()
    {
        return $this->halfIconUrl;
    }
    
    /**
     * Sets the half icon url.
     *
     * @param string $halfIconUrl
     *
     * @return void
     */
    public function setHalfIconUrl($halfIconUrl)
    {
        if ($this->halfIconUrl !== $halfIconUrl) {
            $this->halfIconUrl = isset($halfIconUrl) ? $halfIconUrl : '';
        }
    }
    
    /**
     * Returns the empty icon url.
     *
     * @return string
     */
    public function getEmptyIconUrl()
    {
        return $this->emptyIconUrl;
    }
    
    /**
     * Sets the empty icon url.
     *
     * @param string $emptyIconUrl
     *
     * @return void
     */
    public function setEmptyIconUrl($emptyIconUrl)
    {
        if ($this->emptyIconUrl !== $emptyIconUrl) {
            $this->emptyIconUrl = isset($emptyIconUrl) ? $emptyIconUrl : '';
        }
    }
    
    /**
     * Returns the rating entries per page.
     *
     * @return int
     */
    public function getRatingEntriesPerPage()
    {
        return $this->ratingEntriesPerPage;
    }
    
    /**
     * Sets the rating entries per page.
     *
     * @param int $ratingEntriesPerPage
     *
     * @return void
     */
    public function setRatingEntriesPerPage($ratingEntriesPerPage)
    {
        if ((int)$this->ratingEntriesPerPage !== (int)$ratingEntriesPerPage) {
            $this->ratingEntriesPerPage = (int)$ratingEntriesPerPage;
        }
    }
    
    /**
     * Returns the link own ratings on account page.
     *
     * @return bool
     */
    public function getLinkOwnRatingsOnAccountPage()
    {
        return $this->linkOwnRatingsOnAccountPage;
    }
    
    /**
     * Sets the link own ratings on account page.
     *
     * @param bool $linkOwnRatingsOnAccountPage
     *
     * @return void
     */
    public function setLinkOwnRatingsOnAccountPage($linkOwnRatingsOnAccountPage)
    {
        if ((bool)$this->linkOwnRatingsOnAccountPage !== (bool)$linkOwnRatingsOnAccountPage) {
            $this->linkOwnRatingsOnAccountPage = (bool)$linkOwnRatingsOnAccountPage;
        }
    }
    
    /**
     * Returns the show only own entries.
     *
     * @return bool
     */
    public function getShowOnlyOwnEntries()
    {
        return $this->showOnlyOwnEntries;
    }
    
    /**
     * Sets the show only own entries.
     *
     * @param bool $showOnlyOwnEntries
     *
     * @return void
     */
    public function setShowOnlyOwnEntries($showOnlyOwnEntries)
    {
        if ((bool)$this->showOnlyOwnEntries !== (bool)$showOnlyOwnEntries) {
            $this->showOnlyOwnEntries = (bool)$showOnlyOwnEntries;
        }
    }
    
    /**
     * Returns the allow moderation specific creator for rating.
     *
     * @return bool
     */
    public function getAllowModerationSpecificCreatorForRating()
    {
        return $this->allowModerationSpecificCreatorForRating;
    }
    
    /**
     * Sets the allow moderation specific creator for rating.
     *
     * @param bool $allowModerationSpecificCreatorForRating
     *
     * @return void
     */
    public function setAllowModerationSpecificCreatorForRating($allowModerationSpecificCreatorForRating)
    {
        if ((bool)$this->allowModerationSpecificCreatorForRating !== (bool)$allowModerationSpecificCreatorForRating) {
            $this->allowModerationSpecificCreatorForRating = (bool)$allowModerationSpecificCreatorForRating;
        }
    }
    
    /**
     * Returns the allow moderation specific creation date for rating.
     *
     * @return bool
     */
    public function getAllowModerationSpecificCreationDateForRating()
    {
        return $this->allowModerationSpecificCreationDateForRating;
    }
    
    /**
     * Sets the allow moderation specific creation date for rating.
     *
     * @param bool $allowModerationSpecificCreationDateForRating
     *
     * @return void
     */
    public function setAllowModerationSpecificCreationDateForRating($allowModerationSpecificCreationDateForRating)
    {
        if ((bool)$this->allowModerationSpecificCreationDateForRating !== (bool)$allowModerationSpecificCreationDateForRating) {
            $this->allowModerationSpecificCreationDateForRating = (bool)$allowModerationSpecificCreationDateForRating;
        }
    }
    
    /**
     * Loads module variables from the database.
     */
    protected function load()
    {
        $moduleVars = $this->variableApi->getAll('PaustianRatingsModule');
    
        if (isset($moduleVars['ratingScale'])) {
            $this->setRatingScale($moduleVars['ratingScale']);
        }
        if (isset($moduleVars['iconFa'])) {
            $this->setIconFa($moduleVars['iconFa']);
        }
        if (isset($moduleVars['halfIconFa'])) {
            $this->setHalfIconFa($moduleVars['halfIconFa']);
        }
        if (isset($moduleVars['emptyIconFa'])) {
            $this->setEmptyIconFa($moduleVars['emptyIconFa']);
        }
        if (isset($moduleVars['iconUrl'])) {
            $this->setIconUrl($moduleVars['iconUrl']);
        }
        if (isset($moduleVars['halfIconUrl'])) {
            $this->setHalfIconUrl($moduleVars['halfIconUrl']);
        }
        if (isset($moduleVars['emptyIconUrl'])) {
            $this->setEmptyIconUrl($moduleVars['emptyIconUrl']);
        }
        if (isset($moduleVars['ratingEntriesPerPage'])) {
            $this->setRatingEntriesPerPage($moduleVars['ratingEntriesPerPage']);
        }
        if (isset($moduleVars['linkOwnRatingsOnAccountPage'])) {
            $this->setLinkOwnRatingsOnAccountPage($moduleVars['linkOwnRatingsOnAccountPage']);
        }
        if (isset($moduleVars['showOnlyOwnEntries'])) {
            $this->setShowOnlyOwnEntries($moduleVars['showOnlyOwnEntries']);
        }
        if (isset($moduleVars['allowModerationSpecificCreatorForRating'])) {
            $this->setAllowModerationSpecificCreatorForRating($moduleVars['allowModerationSpecificCreatorForRating']);
        }
        if (isset($moduleVars['allowModerationSpecificCreationDateForRating'])) {
            $this->setAllowModerationSpecificCreationDateForRating($moduleVars['allowModerationSpecificCreationDateForRating']);
        }
    }
    
    /**
     * Saves module variables into the database.
     */
    public function save()
    {
        $this->variableApi->set('PaustianRatingsModule', 'ratingScale', $this->getRatingScale());
        $this->variableApi->set('PaustianRatingsModule', 'iconFa', $this->getIconFa());
        $this->variableApi->set('PaustianRatingsModule', 'halfIconFa', $this->getHalfIconFa());
        $this->variableApi->set('PaustianRatingsModule', 'emptyIconFa', $this->getEmptyIconFa());
        $this->variableApi->set('PaustianRatingsModule', 'iconUrl', $this->getIconUrl());
        $this->variableApi->set('PaustianRatingsModule', 'halfIconUrl', $this->getHalfIconUrl());
        $this->variableApi->set('PaustianRatingsModule', 'emptyIconUrl', $this->getEmptyIconUrl());
        $this->variableApi->set('PaustianRatingsModule', 'ratingEntriesPerPage', $this->getRatingEntriesPerPage());
        $this->variableApi->set('PaustianRatingsModule', 'linkOwnRatingsOnAccountPage', $this->getLinkOwnRatingsOnAccountPage());
        $this->variableApi->set('PaustianRatingsModule', 'showOnlyOwnEntries', $this->getShowOnlyOwnEntries());
        $this->variableApi->set('PaustianRatingsModule', 'allowModerationSpecificCreatorForRating', $this->getAllowModerationSpecificCreatorForRating());
        $this->variableApi->set('PaustianRatingsModule', 'allowModerationSpecificCreationDateForRating', $this->getAllowModerationSpecificCreationDateForRating());
    }
}
