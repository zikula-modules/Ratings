<?php

/**
 * Ratings.
 *
 * @copyright Timothy Paustian (Paustian)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Timothy Paustian <tdpaustian@gmail.com>.
 * @see https://www.microbiologytext.com/
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

namespace Paustian\RatingsModule\Form\Type;

use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Paustian\RatingsModule\Form\Type\Base\AbstractConfigType;
use Paustian\RatingsModule\Validator\Constraints\IconFaGroup;
use Paustian\RatingsModule\Validator\Constraints\IconUrlGroup;
use Symfony\Component\Form\FormInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

/**
 * Configuration form type implementation class.
 */
class ConfigType extends AbstractConfigType
{
    public function addRatingSettingsFields(FormBuilderInterface $builder, array $options = [])
    {

        $builder->add('ratingScale', IntegerType::class, [
            'label' => $this->__('Rating scale:'),
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('The number of divisions in the scale. For example there are five divisions in a 1 to 5 scale, four divisions in a four-star scale')
            ],
            'help' => $this->__('The number of divisions in the scale. For example there are five divisions in a 1 to 5 scale, four divisions in a four-star scale'),
            'empty_data' => 5,
            'attr' => [
                'maxlength' => 11,
                'class' => '',
                'title' => $this->__('Enter the rating scale. Only digits are allowed.')
            ],
            'required' => true,
        ]);

        $builder->add('iconFa', TextType::class, [
            'label' => $this->__('Icon fa:'),
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('A font-awesome css string that is used to display ratings. Either this or iconUrls must be specified.')
            ],
            'help' => $this->__('A font-awesome css string that is used to display ratings. Either this or iconUrls must be specified.'),
            'empty_data' => '',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => $this->__('Enter the icon fa.')
            ],
            'required' => false,
            'constraints' => new IconFaGroup(),

        ]);

        $builder->add('halfIconFa', TextType::class, [
            'label' => $this->__('Half icon fa:'),
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('A font-awesome css string that is used to display ratings. Either this or iconUrls must be specified.')
            ],
            'help' => $this->__('A font-awesome css string that is used to display ratings. Either this or iconUrls must be specified.'),
            'empty_data' => '',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => $this->__('Enter the half icon fa.')
            ],
            'required' => false,
            'constraints' => new IconFaGroup(),
        ]);

        $builder->add('emptyIconFa', TextType::class, [
            'label' => $this->__('Empty icon fa:'),
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('A font-awesome css string that is used to display ratings. Either this or iconUrls must be specified.')
            ],
            'help' => $this->__('A font-awesome css string that is used to display ratings. Either this or iconUrls must be specified.'),
            'empty_data' => '',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => $this->__('Enter the empty icon fa.')
            ],
            'required' => false,
            'constraints' => new IconFaGroup(),
        ]);

        $builder->add('iconUrl', TextType::class, [
            'label' => $this->__('Icon url:'),
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('A url to a rating icon to be used for a rating. Either this or IconFas must be designated.')
            ],
            'help' => $this->__('A url to a rating icon to be used for a rating. Either this or IconFas must be designated.'),
            'empty_data' => '',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => $this->__('Enter the icon url.')
            ],
            'required' => false,
            'constraints' => new IconUrlGroup(),
        ]);

        $builder->add('halfIconUrl', TextType::class, [
            'label' => $this->__('Half icon url:'),
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('A url to a rating icon to be used for a rating. Either this or IconFas must be designated.')
            ],
            'help' => $this->__('A url to a rating icon to be used for a rating. Either this or IconFas must be designated.'),
            'empty_data' => '',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => $this->__('Enter the half icon url.')
            ],
            'required' => false,
            'constraints' => new IconUrlGroup(),
        ]);

        $builder->add('emptyIconUrl', TextType::class, [
            'label' => $this->__('Empty icon url:'),
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('A url to a rating icon to be used for a rating. Either this or IconFas must be designated.')
            ],
            'help' => $this->__('A url to a rating icon to be used for a rating. Either this or IconFas must be designated.'),
            'empty_data' => '',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => $this->__('Enter the empty icon url.')
            ],
            'required' => false,
            'constraints' => new IconUrlGroup(),
        ]);
    }
}
