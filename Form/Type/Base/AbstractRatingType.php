<?php

/**
 * Ratings.
 *
 * @copyright Timothy Paustian (Paustian)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Timothy Paustian <tdpaustian@gmail.com>.
 * @see https://www.microbiologytext.com/
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

namespace Paustian\RatingsModule\Form\Type\Base;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\Extension\Core\Type\ResetType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Form\FormInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\Common\Translator\TranslatorTrait;
use Paustian\RatingsModule\Entity\Factory\EntityFactory;
use Zikula\UsersModule\Form\Type\UserLiveSearchType;
use Paustian\RatingsModule\Entity\RatingEntity;
use Paustian\RatingsModule\Helper\CollectionFilterHelper;
use Paustian\RatingsModule\Helper\EntityDisplayHelper;
use Paustian\RatingsModule\Helper\ListEntriesHelper;
use Paustian\RatingsModule\Traits\ModerationFormFieldsTrait;

/**
 * Rating editing form type base class.
 */
abstract class AbstractRatingType extends AbstractType
{
    use TranslatorTrait;

    use ModerationFormFieldsTrait;

    /**
     * @var EntityFactory
     */
    protected $entityFactory;

    /**
     * @var CollectionFilterHelper
     */
    protected $collectionFilterHelper;

    /**
     * @var EntityDisplayHelper
     */
    protected $entityDisplayHelper;

    /**
     * @var ListEntriesHelper
     */
    protected $listHelper;

    public function __construct(
        TranslatorInterface $translator,
        EntityFactory $entityFactory,
        CollectionFilterHelper $collectionFilterHelper,
        EntityDisplayHelper $entityDisplayHelper,
        ListEntriesHelper $listHelper
    ) {
        $this->setTranslator($translator);
        $this->entityFactory = $entityFactory;
        $this->collectionFilterHelper = $collectionFilterHelper;
        $this->entityDisplayHelper = $entityDisplayHelper;
        $this->listHelper = $listHelper;
    }

    public function setTranslator(TranslatorInterface $translator)
    {
        $this->translator = $translator;
    }

    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $this->addEntityFields($builder, $options);
        $this->addOutgoingRelationshipFields($builder, $options);
        $this->addModerationFields($builder, $options);
        $this->addSubmitButtons($builder, $options);
    }

    /**
     * Adds basic entity fields.
     */
    public function addEntityFields(FormBuilderInterface $builder, array $options = [])
    {
        
        $builder->add('moduleName', TextType::class, [
            'label' => $this->__('Module name:'),
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('The name of the module that the rating is linked to')
            ],
            'help' => $this->__('The name of the module that the rating is linked to'),
            'empty_data' => '',
            'attr' => [
                'maxlength' => 64,
                'class' => '',
                'title' => $this->__('Enter the module name of the rating.')
            ],
            'required' => true,
        ]);
        
        $builder->add('objectId', IntegerType::class, [
            'label' => $this->__('Object id:'),
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('The id of the object that identifies the module instance this rating is linked to')
            ],
            'help' => $this->__('The id of the object that identifies the module instance this rating is linked to'),
            'empty_data' => 0,
            'attr' => [
                'maxlength' => 11,
                'class' => '',
                'title' => $this->__('Enter the object id of the rating. Only digits are allowed.')
            ],
            'required' => true,
        ]);
        
        $builder->add('rating', IntegerType::class, [
            'label' => $this->__('Rating:'),
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('The rating, based upon a scale for the item')
            ],
            'help' => $this->__('The rating, based upon a scale for the item'),
            'empty_data' => 0,
            'attr' => [
                'maxlength' => 3,
                'class' => '',
                'title' => $this->__('Enter the rating of the rating. Only digits are allowed.')
            ],
            'required' => true,
        ]);
        
        $builder->add('userId', UserLiveSearchType::class, [
            'label' => $this->__('User id:'),
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('The Id of the user who rated the item. ')
            ],
            'help' => $this->__('The Id of the user who rated the item. '),
            'empty_data' => 0,
            'attr' => [
                'maxlength' => 11,
                'class' => '',
                'title' => $this->__('Enter the user id of the rating.')
            ],
            'required' => true,
            'inline_usage' => $options['inline_usage']
        ]);
        
        $builder->add('ratingSystem', IntegerType::class, [
            'label' => $this->__('Rating system:'),
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('The system to use for rating. For example 1 to 5 stars, or 1 to 10 number scale. ')
            ],
            'help' => $this->__('The system to use for rating. For example 1 to 5 stars, or 1 to 10 number scale. '),
            'empty_data' => 1,
            'attr' => [
                'maxlength' => 11,
                'class' => '',
                'title' => $this->__('Enter the rating system of the rating. Only digits are allowed.')
            ],
            'required' => true,
        ]);
    }

    /**
     * Adds fields for outgoing relationships.
     */
    public function addOutgoingRelationshipFields(FormBuilderInterface $builder, array $options = [])
    {
        $queryBuilder = function (EntityRepository $er) {
            // select without joins
            return $er->getListQueryBuilder('', '', false);
        };
        $entityDisplayHelper = $this->entityDisplayHelper;
        $choiceLabelClosure = function ($entity) use ($entityDisplayHelper) {
            return $entityDisplayHelper->getFormattedTitle($entity);
        };
        $builder->add('ratingSystemVal', 'Symfony\Bridge\Doctrine\Form\Type\EntityType', [
            'class' => 'PaustianRatingsModule:RatingSystemEntity',
            'choice_label' => $choiceLabelClosure,
            'multiple' => false,
            'expanded' => false,
            'query_builder' => $queryBuilder,
            'placeholder' => $this->__('Please choose an option.'),
            'required' => false,
            'label' => $this->__('Rating system val'),
            'attr' => [
                'title' => $this->__('Choose the rating system val.')
            ]
        ]);
    }

    /**
     * Adds submit buttons.
     */
    public function addSubmitButtons(FormBuilderInterface $builder, array $options = [])
    {
        foreach ($options['actions'] as $action) {
            $builder->add($action['id'], SubmitType::class, [
                'label' => $action['title'],
                'icon' => 'delete' === $action['id'] ? 'fa-trash-o' : '',
                'attr' => [
                    'class' => $action['buttonClass']
                ]
            ]);
            if ('create' === $options['mode'] && 'submit' === $action['id'] && !$options['inline_usage']) {
                // add additional button to submit item and return to create form
                $builder->add('submitrepeat', SubmitType::class, [
                    'label' => $this->__('Submit and repeat'),
                    'icon' => 'fa-repeat',
                    'attr' => [
                        'class' => $action['buttonClass']
                    ]
                ]);
            }
        }
        $builder->add('reset', ResetType::class, [
            'label' => $this->__('Reset'),
            'icon' => 'fa-refresh',
            'attr' => [
                'class' => 'btn btn-default',
                'formnovalidate' => 'formnovalidate'
            ]
        ]);
        $builder->add('cancel', SubmitType::class, [
            'label' => $this->__('Cancel'),
            'icon' => 'fa-times',
            'attr' => [
                'class' => 'btn btn-default',
                'formnovalidate' => 'formnovalidate'
            ]
        ]);
    }

    public function getBlockPrefix()
    {
        return 'paustianratingsmodule_rating';
    }

    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver
            ->setDefaults([
                // define class for underlying data (required for embedding forms)
                'data_class' => RatingEntity::class,
                'empty_data' => function (FormInterface $form) {
                    return $this->entityFactory->createRating();
                },
                'error_mapping' => [
                    'isUserIdUserValid' => 'userId',
                ],
                'mode' => 'create',
                'actions' => [],
                'has_moderate_permission' => false,
                'allow_moderation_specific_creator' => false,
                'allow_moderation_specific_creation_date' => false,
                'filter_by_ownership' => true,
                'inline_usage' => false
            ])
            ->setRequired(['mode', 'actions'])
            ->setAllowedTypes('mode', 'string')
            ->setAllowedTypes('actions', 'array')
            ->setAllowedTypes('has_moderate_permission', 'bool')
            ->setAllowedTypes('allow_moderation_specific_creator', 'bool')
            ->setAllowedTypes('allow_moderation_specific_creation_date', 'bool')
            ->setAllowedTypes('filter_by_ownership', 'bool')
            ->setAllowedTypes('inline_usage', 'bool')
            ->setAllowedValues('mode', ['create', 'edit'])
        ;
    }
}
