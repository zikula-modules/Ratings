<?php

/**
 * Ratings.
 *
 * @copyright Timothy Paustian (Paustian)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Timothy Paustian <tdpaustian@gmail.com>.
 *
 * @see https://www.microbiologytext.com/
 * @see https://ziku.la
 *
 * @version Generated by ModuleStudio 1.5.0 (https://modulestudio.de).
 */

declare(strict_types=1);

namespace Paustian\RatingsModule\Controller;

use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use Liip\ImagineBundle\Imagine\Cache\CacheManager;
use Paustian\RatingsModule\Api\RatingsApi;
use Paustian\RatingsModule\Controller\Base\AbstractAjaxController;
use Paustian\RatingsModule\Entity\Factory\EntityFactory;
use Paustian\RatingsModule\Helper\ControllerHelper;
use Paustian\RatingsModule\Helper\EntityDisplayHelper;
use Zikula\UsersModule\Entity\RepositoryInterface\UserRepositoryInterface;

/**
 * Ajax controller implementation class.
 *
 * @Route("/ajax")
 */
class AjaxController extends AbstractAjaxController
{
    /**
     * @Route("/getItemListAutoCompletion", methods = {"GET"}, options={"expose"=true})
     */
    public function getItemListAutoCompletionAction(
        Request $request,
        CacheManager $imagineCacheManager,
        ControllerHelper $controllerHelper,
        EntityFactory $entityFactory,
        EntityDisplayHelper $entityDisplayHelper
    ): JsonResponse {
        return parent::getItemListAutoCompletionAction(
            $request,
            $imagineCacheManager,
            $controllerHelper,
            $entityFactory,
            $entityDisplayHelper
        );
    }
    
    /**
     * @Route("/attachHookObject", methods = {"POST"}, options={"expose"=true})
     */
    public function attachHookObjectAction(
        Request $request,
        EntityFactory $entityFactory
    ): JsonResponse {
        return parent::attachHookObjectAction(
            $request,
            $entityFactory
        );
    }
    
    /**
     * @Route("/detachHookObject", methods = {"POST"}, options={"expose"=true})
     */
    public function detachHookObjectAction(
        Request $request,
        EntityFactory $entityFactory
    ): JsonResponse {
        return parent::detachHookObjectAction(
            $request,
            $entityFactory
        );
    }

    /**
     * @Route("/setRating", methods = {"POST"}, options={"expose"=true})
     */
    public function setRatingAction(
        Request $request,
        EntityFactory $entityFactory,
        UserRepositoryInterface $userRepository
    ): JsonResponse {
        if (!$request->isXmlHttpRequest()) {
            return $this->json($this->__('Only ajax access is allowed!'), Response::HTTP_BAD_REQUEST);
        }

        if (!$this->hasPermission('PaustianRatingsModule::Ajax', '::', ACCESS_COMMENT)) {
            return $this->json($this->__('Sorry, you need to be registred as a user to set ratings.'), Response::HTTP_RESERVED);
        }
        //grab the variables we need.
        $module = $request->request->get('module', 0);
        if (!$module) {
            return $this->json($this->__('Error: No module specified.'), JsonResponse::HTTP_BAD_REQUEST);
        }
        $moduleItem = $request->request->getInt('moduleItem', 0);
        if (!$moduleItem) {
            return $this->json($this->__('Error: No module item specified.'), JsonResponse::HTTP_BAD_REQUEST);
        }

        $rating = $request->request->getInt('rating', 0);
        if (!$rating) {
            return $this->json($this->__('Error: No rating specified.'), JsonResponse::HTTP_BAD_REQUEST);
        }

        $user = $request->request->getInt('user', 0);
        if (!$user) {
            return $this->json($this->__('Error: No rating specified.'), JsonResponse::HTTP_BAD_REQUEST);
        }
        //We have all the data that we need.
        $em = $this->getDoctrine()->getManager();
        $repo = $entityFactory->getRepository('rating');
        //Have they already rated? If so just update
        $ratingData = $repo->getRatingForItem($module, $moduleItem, $user);
        //add or update the rating
        if (empty($ratingData)) {
            //make a new one
            $ratingObj = $entityFactory->createRating();
            $ratingObj->setModuleName($module);
            $userEntity = $userRepository->findBy(['uid' => $user]);
            $ratingObj->setUserId($userEntity[0]);
            $ratingObj->setObjectId($moduleItem);
            $ratingObj->setRating($rating);
            $em->persist($ratingObj);
        } else {
            $ratingObj = $ratingData[0];
            $ratingObj->setRating($rating);
            $em->merge($ratingObj);
        }
        $em->flush();

        // grab the module variables
        $modVars = $this->getVars();
        RatingsApi::adjustUrlPath($modVars, $request->getBasePath());
        $ratings = $repo->getRatingForItem($module, $moduleItem);
        $avgData = RatingsApi::calculateAverage($ratings, $modVars['ratingScale']);

        // return a JSON response
        $jsonReply = [
            'user' => $user,
            'rating' => $rating,
            'avgData' => $avgData,
            'modVars' => $modVars,
        ];

        return new JsonResponse($jsonReply);
    }
}
