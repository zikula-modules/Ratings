<?php

/**
 * Ratings.
 *
 * @copyright Timothy Paustian (Paustian)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Timothy Paustian <tdpaustian@gmail.com>.
 * @see https://www.microbiologytext.com/
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

declare(strict_types=1);

namespace Paustian\RatingsModule\Validator\Constraints;

use Symfony\Component\Validator\Constraint;
use Symfony\Component\Validator\ConstraintValidator;
use Symfony\Contracts\Translation\TranslatorInterface;
use Zikula\Bundle\CoreBundle\HttpKernel\ZikulaHttpKernelInterface;
use Zikula\Bundle\CoreBundle\Translation\TranslatorTrait;

/**
 * List entry validator.
 */
class IconUrlGroupValidator extends ConstraintValidator
{
    use TranslatorTrait;

    /**
     * @var string
     */
    public $projectDir;

    public function __construct(
        TranslatorInterface $translator,
        ZikulaHttpKernelInterface $kernel
    ) {
        $this->setTranslator($translator);
        $this->projectDir = $kernel->getProjectDir();
    }

    public function validate($value, Constraint $constraint)
    {
        $data = $this->context->getRoot()->getData();
        // if this is empty, then check to make sure the url icons are full
        if (!preg_match('/\S/', $value)) {
            if (
                !preg_match('/\S/', $data->getIconFa())
                || !preg_match('/\S/', $data->getHalfIconFa())
                || !preg_match('/\S/', $data->getEmptyIconFa())
            ) {
                $this->context->buildViolation($this->trans('If this string is empty then the faIcon strings have to be specified.'))->addViolation();
            }
            // if the string is empty, we don't need to check further
            return;
        }

        //check for the file it points to
        if (!file_exists($this->projectDir . '/'.  $value)) {
            $this->context->buildViolation($this->trans('This file path does not exist.'))->addViolation();
        }
    }
}
