<?php

/**
 * Ratings.
 *
 * @copyright Timothy Paustian (Paustian)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Timothy Paustian <tdpaustian@gmail.com>.
 * @see https://www.microbiologytext.com/
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

declare(strict_types=1);

namespace Paustian\RatingsModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Component\Validator\Constraints as Assert;
use Zikula\Bundle\CoreBundle\Doctrine\EntityAccess;
use Zikula\UsersModule\Entity\UserEntity;
use Paustian\RatingsModule\Traits\StandardFieldsTrait;
use Paustian\RatingsModule\Validator\Constraints as RatingsAssert;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for rating entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 */
abstract class AbstractRatingEntity extends EntityAccess
{
    /**
     * Hook standard fields behaviour embedding createdBy, updatedBy, createdDate, updatedDate fields.
     */
    use StandardFieldsTrait;

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'rating';
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @Assert\Type(type="integer")
     * @Assert\NotNull
     * @Assert\LessThan(value=1000000000)
     * @var int $id
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     *
     * @ORM\Column(length=20)
     * @Assert\NotBlank
     * @RatingsAssert\ListEntry(entityName="rating", propertyName="workflowState", multiple=false)
     * @var string $workflowState
     */
    protected $workflowState = 'initial';
    
    /**
     * The name of the module that the rating is linked to
     *
     * @ORM\Column(length=64)
     * @Assert\NotBlank
     * @Assert\Length(min="0", max="64", allowEmptyString="false")
     * @var string $moduleName
     */
    protected $moduleName = '';
    
    /**
     * The id of the object that identifies the module instance this rating is linked to
     *
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var int $objectId
     */
    protected $objectId = 0;
    
    /**
     * The rating, based upon a scale for the item
     *
     * @ORM\Column(type="smallint")
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=1000)
     * @var int $rating
     */
    protected $rating = 0;
    
    /**
     * The Id of the user who rated the item. 
     *
     * @ORM\ManyToOne(targetEntity="Zikula\UsersModule\Entity\UserEntity")
     * @ORM\JoinColumn(referencedColumnName="uid")
     * @Assert\NotBlank
     * @var UserEntity $userId
     */
    protected $userId = 0;
    
    
    
    /**
     * RatingEntity constructor.
     *
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
    }
    
    public function get_objectType(): string
    {
        return $this->_objectType;
    }
    
    public function set_objectType(string $_objectType): void
    {
        if ($this->_objectType !== $_objectType) {
            $this->_objectType = $_objectType ?? '';
        }
    }
    
    public function getId(): ?int
    {
        return $this->id;
    }
    
    public function setId(int $id = null): void
    {
        if ((int)$this->id !== $id) {
            $this->id = $id;
        }
    }
    
    public function getWorkflowState(): string
    {
        return $this->workflowState;
    }
    
    public function setWorkflowState(string $workflowState): void
    {
        if ($this->workflowState !== $workflowState) {
            $this->workflowState = $workflowState ?? '';
        }
    }
    
    public function getModuleName(): string
    {
        return $this->moduleName;
    }
    
    public function setModuleName(string $moduleName): void
    {
        if ($this->moduleName !== $moduleName) {
            $this->moduleName = $moduleName ?? '';
        }
    }
    
    public function getObjectId(): int
    {
        return $this->objectId;
    }
    
    public function setObjectId(int $objectId): void
    {
        if ((int)$this->objectId !== $objectId) {
            $this->objectId = $objectId;
        }
    }
    
    public function getRating(): int
    {
        return $this->rating;
    }
    
    public function setRating(int $rating): void
    {
        if ((int)$this->rating !== $rating) {
            $this->rating = $rating;
        }
    }
    
    public function getUserId()/*: UserEntity*/
    {
        return $this->userId;
    }
    
    public function setUserId(/*UserEntity */$userId): void
    {
        if ($this->userId !== $userId) {
            if ($userId instanceof UserEntity) {
                $this->userId = $userId;
            }
        }
    }
    
    /**
     * Checks whether the userId field contains a valid user reference.
     * This method is used for validation.
     *
     * @Assert\IsTrue(message="This value must be a valid user id.")
     */
    public function isUserIdUserValid(): bool
    {
        return $this['userId'] instanceof UserEntity;
    }
    
    /**
     * Creates url arguments array for easy creation of display urls.
     */
    public function createUrlArgs(): array
    {
        return [
            'id' => $this->getId()
        ];
    }
    
    /**
     * Returns the primary key.
     */
    public function getKey(): ?int
    {
        return $this->getId();
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     */
    public function getRelatedObjectsToPersist(array &$objects = []): array
    {
        return [];
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     */
    public function __toString(): string
    {
        return 'Rating ' . $this->getKey() . ': ' . $this->getModuleName();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // if the entity has no identity do nothing, do NOT throw an exception
        if (!$this->id) {
            return;
        }
    
        // otherwise proceed
    
        // unset identifier
        $this->setId(0);
    
        // reset workflow
        $this->setWorkflowState('initial');
    
        $this->setCreatedBy(null);
        $this->setCreatedDate(null);
        $this->setUpdatedBy(null);
        $this->setUpdatedDate(null);
    }
}
