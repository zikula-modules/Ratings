<?php

/**
 * Ratings.
 *
 * @copyright Timothy Paustian (Paustian)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Timothy Paustian <tdpaustian@gmail.com>.
 * @see https://www.microbiologytext.com/
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

namespace Paustian\RatingsModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Component\Validator\Constraints as Assert;
use Zikula\Core\Doctrine\EntityAccess;
use Paustian\RatingsModule\Traits\StandardFieldsTrait;
use Paustian\RatingsModule\Validator\Constraints as RatingsAssert;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for rating system entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 */
abstract class AbstractRatingSystemEntity extends EntityAccess
{
    /**
     * Hook standard fields behaviour embedding createdBy, updatedBy, createdDate, updatedDate fields.
     */
    use StandardFieldsTrait;

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'ratingSystem';
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @var int $id
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     *
     * @ORM\Column(length=20)
     * @Assert\NotBlank
     * @RatingsAssert\ListEntry(entityName="ratingSystem", propertyName="workflowState", multiple=false)
     * @var string $workflowState
     */
    protected $workflowState = 'initial';
    
    /**
     * The number of divisions in the scale. For example there are five divisions in a 1 to 5 scale, four divisions in a four-star scale
     *
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var int $scaleDim
     */
    protected $scaleDim = 0;
    
    /**
     * A font-awesome css string that is used to display ratings. Either this or iconUrl must be specified.
     *
     * @ORM\Column(length=255)
     * @Assert\NotNull
     * @Assert\Length(min="0", max="255")
     * @var string $iconFa
     */
    protected $iconFa = '';
    
    /**
     * A url to a rating icon to be used. Either this or IconFa must be designated.
     *
     * @ORM\Column(length=255)
     * @Assert\NotNull
     * @Assert\Length(min="0", max="255")
     * @Assert\Url(checkDNS=false)
     * @var string $iconUrl
     */
    protected $iconUrl = '';
    
    
    
    /**
     * RatingSystemEntity constructor.
     *
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
    }
    
    /**
     * Returns the _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Sets the _object type.
     *
     * @param string $_objectType
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        if ($this->_objectType !== $_objectType) {
            $this->_objectType = isset($_objectType) ? $_objectType : '';
        }
    }
    
    /**
     * Returns the id.
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Sets the id.
     *
     * @param int $id
     *
     * @return void
     */
    public function setId($id = null)
    {
        if ((int)$this->id !== (int)$id) {
            $this->id = (int)$id;
        }
    }
    
    /**
     * Returns the workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Sets the workflow state.
     *
     * @param string $workflowState
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        if ($this->workflowState !== $workflowState) {
            $this->workflowState = isset($workflowState) ? $workflowState : '';
        }
    }
    
    /**
     * Returns the scale dim.
     *
     * @return int
     */
    public function getScaleDim()
    {
        return $this->scaleDim;
    }
    
    /**
     * Sets the scale dim.
     *
     * @param int $scaleDim
     *
     * @return void
     */
    public function setScaleDim($scaleDim)
    {
        if ((int)$this->scaleDim !== (int)$scaleDim) {
            $this->scaleDim = (int)$scaleDim;
        }
    }
    
    /**
     * Returns the icon fa.
     *
     * @return string
     */
    public function getIconFa()
    {
        return $this->iconFa;
    }
    
    /**
     * Sets the icon fa.
     *
     * @param string $iconFa
     *
     * @return void
     */
    public function setIconFa($iconFa)
    {
        if ($this->iconFa !== $iconFa) {
            $this->iconFa = isset($iconFa) ? $iconFa : '';
        }
    }
    
    /**
     * Returns the icon url.
     *
     * @return string
     */
    public function getIconUrl()
    {
        return $this->iconUrl;
    }
    
    /**
     * Sets the icon url.
     *
     * @param string $iconUrl
     *
     * @return void
     */
    public function setIconUrl($iconUrl)
    {
        if ($this->iconUrl !== $iconUrl) {
            $this->iconUrl = isset($iconUrl) ? $iconUrl : '';
        }
    }
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @return array List of resulting arguments
     */
    public function createUrlArgs()
    {
        return [
            'id' => $this->getId()
        ];
    }
    
    /**
     * Returns the primary key.
     *
     * @return int The identifier
     */
    public function getKey()
    {
        return $this->getId();
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     *
     * @param array $objects Objects that are added to this array
     *
     * @return array List of entity objects
     */
    public function getRelatedObjectsToPersist(&$objects = [])
    {
        return [];
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     *
     * @return string The output string for this entity
     */
    public function __toString()
    {
        return 'Rating system ' . $this->getKey() . ': ' . $this->getIconFa();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // if the entity has no identity do nothing, do NOT throw an exception
        if (!$this->id) {
            return;
        }
    
        // otherwise proceed
    
        // unset identifier
        $this->setId(0);
    
        // reset workflow
        $this->setWorkflowState('initial');
    
        $this->setCreatedBy(null);
        $this->setCreatedDate(null);
        $this->setUpdatedBy(null);
        $this->setUpdatedDate(null);
    }
}
